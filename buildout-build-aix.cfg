[buildout]
extends = buildout-build.cfg
parts = zlib ncurses readline openssl openssh libgpg-error libgcrypt gettext libiconv libgnutls bzip2 sqlite3 db libxml2 libxslt libffi gdbm cyrus-sasl libevent libev zeromq openldap python

[environment]
CC = gcc -static-libgcc -fPIC
LDFLAGS = -L${options:prefix}/lib -Wl,-blibpath:/usr/lib
SHARED_LDFLAGS = -L${options:prefix}/lib -Wl,-blibpath:/usr/lib
LIBPATH = -L${options:prefix}/lib
CFLAGS = -I${options:prefix}/include
CPPFLAGS = ${:CFLAGS}
# The *_LIBRARY_PATH definitions cause built-in executables that we run to link against our new shared objects which doesn't work
DYLD_LIBRARY_PATH =
LD_LIBRARY_PATH = 

[ncurses]
# removed with-shared due to error in configure: "Shared libraries are not supported in this version"
configure-options = ${options:configure-options} --with-gpg-error-prefix=${:prefix} --disable-big-core --disable-root-environ --disable-macros --disable-rpath --disable-largefile --without-ada --without-cxx-binding --with-terminfo-dirs=/etc/terminfo:/lib/terminfo:/usr/share/terminfo

[openssl]
# OpenSSL's configure doesn't respect CC/GCC env vars properly (it only decides which compiler to use according to which is defined, but doesn't use the flags).
# we pass the compiler and flags in the configure options instead, this overwrites any env var
# note that --shared doesn't actually work on aix
configure-options = --prefix=${options:prefix} --openssldir=/var/ssl/ --shared --libdir=lib gcc:"gcc -static-libgcc -fPIC"
# run "slibclean" before "make install", otherwise make install fails due to "files already in use"
make-binary = slibclean; make

[openssh-environment]
<= environment
# add . and .. as search paths, otherwise the wrong "buffer.h" (from openssl) will be used
CFLAGS = ${environment:CFLAGS} -I. -I.. -I${options:prefix}/include/openssl

[libgcrypt]
configure-options = ${options:configure-options} --with-gpg-error-prefix=${:prefix} --enable-static --disable-asm

[bzip2]
patches = ${:patches-dir}/${:name}-${:version}-unix-Makefile.patch

[libxslt]
name = libxslt
patches = ${:patches-dir}/${:name}-${:version}-configure.patch
pre-configure-hook = ${options:hooks-dir}/unix.py:chmod_configure

[libevent]
environment-section = libevent-environment

[libevent-environment]
<= environment
# define _EVENT_HAVE_FD_MASK, otherwise there is redefinition of type fd_mask
CFLAGS = ${environment:CFLAGS} -D_EVENT_HAVE_FD_MASK

[zeromq]
patches = ${:patches-dir}/${:name}-${:version}-newline.patch
    ${:patches-dir}/${:name}-${:version}-test_disconnect_inproc.cpp.patch

[python]
environment-section = python-environment
configure-options = --prefix=${options:prefix} --enable-shared --enable-ipv6 --with-dbmliborder=gdbm --with-gcc --with-system-ffi --libdir=${options:prefix}/lib --with-system-ffi
patches = ${:patches-dir}/${:name}-${:version}-sysconfig.py.patch
    ${:patches-dir}/${:name}-${:version}-disutils-sysconfig.py.patch
    ${:patches-dir}/${:name}-${:version}-pythonhome-pythonrun.c.patch
    ${:patches-dir}/${:name}-${:version}-linux-symlink.patch
    ${:patches-dir}/${:name}-${:version}-aix-libpath.patch
    ${:patches-dir}/${:name}-${:version}-aix-fopen.patch
post-make-hook = ${options:hooks-dir}/aix.py:python_post_make

[python-environment]
<= environment
CFLAGS = ${environment:CFLAGS} -I${options:prefix}/include/gnutls -I${options:prefix}/include/graphviz -I${options:prefix}/include/libexslt -I${options:prefix}/include/libxml2 -I${options:prefix}/include/libxslt -I${options:prefix}/include/ncurses -I${options:prefix}/include/openssl -I${options:prefix}/include/readline -I${options:prefix}/include/sasl -I${options:prefix}/lib/libffi-${libffi:version}/include
LDFLAGS =  ${environment:LDFLAGS} -L${options:prefix}/lib/engines -L${options:prefix}/lib/gettext -L${options:prefix}/lib/graphviz -L${options:prefix}/lib/libxslt-plugins -L${options:prefix}/lib/pkgconfig -L${options:prefix}/lib/sasl2 -Wl,-blibpath:.:../lib:/usr/lib
OPT = -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes
# LIBPATH is used as a runtime search path environment variable, and we define it so that the lib-dynload so's won't fail to load
# In the global 'environment' section it's defined differently, because some modules use it for ld flags
LIBPATH = ${options:prefix}/lib
# we also need LD_LIBRARY_PATH in order to compile the modules against our libs. See comment above about why we don't
# want it always
LD_LIBRARY_PATH = ${options:prefix}/lib
